import React from 'react';
import { SQLDataType } from '@/Types';
import useCredentialsStore from '../../store/credentialsStore';


// const dataTypeArr: SQLDataType[] = [
//   'AUTO_INCREMENT',
//   'SERIAL',
//   'SMALLSERIAL',
//   'BIGSERIAL',
//   'INT',
//   'INT2',
//   'INT4',
//   'INT8',
//   'SMALLINT',
//   'INTEGER',
//   'BIGINT',
//   'DECIMAL',
//   'NUMERIC',
//   'REAL',
//   'FLOAT',
//   'FLOAT4',
//   'FLOAT8',
//   'DOUBLE PRECISION',
//   'MONEY',
//   'CHARACTER VARYING(8)',
//   'VARCHAR(255)',
//   'CHARACTER(8)',
//   'CHAR(8)',
//   'TEXT',
//   'CITEXT',
//   'HSTORE',
//   'BYTEA',
//   'BIT',
//   'VARBIT',
//   'BIT VARYING',
//   'TIMETZ',
//   'TIMESTAMPTZ',
//   'TIMESTAMP',
//   'TIMESTAMP WITHOUT TIME ZONE',
//   'TIMESTAMP WITH TIME ZONE',
//   'DATE',
//   'TIME',
//   'TIME WITHOUT TIME ZONE',
//   'TIME WITH TIME ZONE',
//   'INTERVAL',
//   'BOOL',
//   'BOOLEAN',
//   'ENUM',
//   'POINT',
//   'LINE',
//   'LSEG',
//   'BOX',
//   'PATH',
//   'POLYGON',
//   'CIRCLE',
//   'CIDR',
//   'INET',
//   'MACADDR',
//   'TSVECTOR',
//   'TSQUERY',
//   'UUID',
//   'XML',
//   'JSON',
//   'JSONB',
//   'INT4RANGE',
//   'INT8RANGE',
//   'NUMRANGE',
//   'TSRANGE',
//   'TSTZRANGE',
//   'DATERANGE',
//   'GEOMETRY',
//   'GEOGRAPHY',
//   'CUBE',
//   'LTREE',
// ];

export default function DataTypeOptions() {
  const { dbCredentials } = useCredentialsStore((state) => state);

  let dataTypeArr: string[] = [];
  switch(dbCredentials.db_type) {
    case ('mysql'):
      dataTypeArr = [
        'BIGINT',
        'BIT',
        'BIT(32)',
        'BIT(64)',
        'BLOB',
        'BOOL',
        'BOOLEAN',
        'BINARY',
        'BINARY(255)',
        'CHAR',
        'CHAR(255)',
        'DATE',
        'DATETIME',
        'DEC',
        'DECIMAL',
        'DOUBLE',
        'DOUBLE(8)',
        'DOUBLE PRECISION',
        'ENUM',
        'FIXED',
        'FLOAT',
        'FLOAT(4)',
        'INT',
        'INTEGER',
        'LARGEBLOB',
        'LONGTEXT',
        'MEDIUMBLOB',
        'MEDIUMINT',
        'MEDIUMTEXT',
        'REAL',
        'SET',
        'SMALLINT',
        'TIMESTAMP',
        'TINYBLOB',
        'TINYINT',
        'TINYTEXT',
        'TYPE',
        'VARBINARY',
        'VARBINARY(255)',
        'VARBINARY(65535)',
        'VARCHAR',
        'VARCHAR(255)',
        'VARCHAR(65535)',
        'YEAR',
        'YEAR(2)',
        'YEAR(4)',
        'ZEROFILL',
      ]
      break;
    case ('mssql'):
      dataTypeArr = [
        'BIGINT',
        'BINARY',
        'BIT',
        'CHAR',
        'CURSOR',
        'DATE',
        'DATETIME',
        'DATETIME2',
        'DATETIMEOFFSET',
        'DECIMAL',
        'FLOAT',
        'HIERARCHYID',
        'INT',
        'IMAGE',
        'MONEY',
        'NCHAR',
        'NTEXT',
        'NVARCHAR',
        'NUMERIC',
        'REAL',
        'ROWVERSION',
        'SQL_VARIANT',
        'SMALLDATETIME',
        'SMALLINT',
        'SMALLMONEY',
        'TABLE',
        'TEXT',
        'TINYINT',
        'TIME',
        'UNIQUEIDENTIFIER',
        'VARBINARY',
        'VARCHAR',
        'XML',
      ]
      break;
    case ('oracle'):
      dataTypeArr = [
        'BINARY_DOUBLE',
        'BFILE',
        'BINARY_FLOAT',
        'BLOB',
        'CHAR(64)',
        'CHAR(255)',
        'CHAR(2000)',
        'CLOB',
        'DATE',
        'INTERVAL DAY TO SECOND',
        'INTERVAL YEAR TO MONTH',
        'FLOAT',
        'LONG',
        'LONG RAW',
        'NUMBER',
        'NCHAR(64)',
        'NCHAR(255)',
        'NCHAR(2000)',
        'NCLOB',
        'NVARCHAR2(30)',
        'NVARCHAR2(64)',
        'NVARCHAR2(255)',
        'NVARCHAR2(4000)',
        'NVARCHAR2(32767)',
        'RAW(2000)',
        'RAW(32767)',
        'ROWID',
        'TIMESTAMP',
        'TIMESTAMP WITH LOCAL TIME ZONE',
        'TIMESTAMP WITH TIME ZONE',
        'UROWID',
        'VARCHAR2(30)',
        'VARCHAR2(64)',
        'VARCHAR2(255)',
        'VARCHAR2(4000)',
        'VARCHAR2(32767)',
      ]
      break;
    case ('sqlite'):
      dataTypeArr = [
        'BLOB',
        'INTEGER(0)',
        'INTEGER(1)',
        'INTEGER(2)',
        'INTEGER(3)',
        'INTEGER(4)',
        'INTEGER(6)',
        'INTEGER(8)',
        'NULL',
        'REAL',
        'TEXT',
      ]
      break;
    default:
      dataTypeArr = [
        'bigint',
        'bigserial',
        'bit',
        'bit varying',
        'boolean',
        'bool',
        'box',
        'bytea',
        'char',
        'character',
        'character varying',
        'cidr',
        'circle',
        'date',
        'decimal',
        'double precision',
        'float4',
        'float8',
        'inet',
        'int',
        'int2',
        'int4',
        'int8',
        'integer',
        'interval',
        'json',
        'jsonb',
        'line',
        'lseg',
        'macaddr',
        'macaddr8',
        'money',
        'numeric',
        'path',
        'pg_lsn',
        'pg_snapshot',
        'point',
        'polygon',
        'real',
        'serial',
        'serial2',
        'serial4',
        'smallint',
        'smallserial',
        'text',
        'time',
        'timetz',
        'timestamp',
        'timestamptz',
        'tsquery',
        'tsvector',
        'txid_snapshot',
        'uuid',
        'xml',
      ]
      break;
  };

  const optionsArr = dataTypeArr.map((dataType) => (
    // populate the options for data type
    // `selected` attribute will default select the type that matches props.type
    <option key={dataType} value={dataType}>
      {dataType}
    </option>
  ));
  return <>{optionsArr}</>;
};
